name: issue-triage

on:
  issues:
    types: [opened, labeled]
  workflow_dispatch:
    inputs:
      issue_number:
        description: Issue number to triage (manual test)
        required: true
        type: number

permissions:
  contents: read
  issues: write
  pull-requests: read

jobs:
  add-to-project-and-notify:
    runs-on: ubuntu-latest
    env:
      DISPATCH_ISSUE: ${{ inputs.issue_number }}
    steps:
      - name: Resolve issue number
        id: resolve
        run: |
          if [ -n "${DISPATCH_ISSUE}" ]; then
            echo "issue_number=${DISPATCH_ISSUE}" >> $GITHUB_OUTPUT
          else
            echo "issue_number=${{ github.event.issue.number }}" >> $GITHUB_OUTPUT
          fi

      - name: Ensure baseline labels
        uses: actions/github-script@v7
        with:
          script: |
            const issueNumber = Number(process.env.ISSUE_NUMBER || 0);
            if (!issueNumber) return;
            const { data: issue } = await github.rest.issues.get({ owner: context.repo.owner, repo: context.repo.repo, issue_number: issueNumber });
            const labels = new Set((issue.labels || []).map(l => typeof l === 'string' ? l : l.name));
            const title = issue.title || '';
            if (/^feat:/i.test(title)) labels.add('feature-request');
            if (/^card:/i.test(title)) labels.add('new-card');
            if (/^data:/i.test(title)) labels.add('data-issue');
            if (/^bug:/i.test(title)) labels.add('bug');
            if (labels.size > 0) {
              await github.rest.issues.update({
                owner: context.repo.owner,
                repo: context.repo.repo,
                issue_number: issueNumber,
                labels: Array.from(labels)
              });
            }
        env:
          ISSUE_NUMBER: ${{ steps.resolve.outputs.issue_number }}

      - name: Add to GitHub Project (issues event only)
        if: ${{ secrets.TRIAGE_PROJECT_URL != '' && github.event_name == 'issues' }}
        uses: actions/add-to-project@v1
        with:
          project-url: ${{ secrets.TRIAGE_PROJECT_URL }}
          github-token: ${{ secrets.TRIAGE_TOKEN != '' && secrets.TRIAGE_TOKEN || secrets.GITHUB_TOKEN }}

      - name: Auto-assign (optional)
        uses: actions/github-script@v7
        with:
          script: |
            const fromVar = process.env.VAR_TRIAGE_ASSIGNEES || '';
            const fromSecret = process.env.SECRET_TRIAGE_ASSIGNEES || '';
            const source = fromVar || fromSecret;
            const assignees = source.split(',').map(s => s.trim()).filter(Boolean);
            if (assignees.length === 0) return;
            await github.rest.issues.addAssignees({
              owner: context.repo.owner,
              repo: context.repo.repo,
              issue_number: Number(process.env.ISSUE_NUMBER),
              assignees
            });
        env:
          ISSUE_NUMBER: ${{ steps.resolve.outputs.issue_number }}
          VAR_TRIAGE_ASSIGNEES: ${{ vars.TRIAGE_ASSIGNEES }}
          SECRET_TRIAGE_ASSIGNEES: ${{ secrets.TRIAGE_ASSIGNEES }}

      - name: Slack notify (optional)
        if: ${{ secrets.SLACK_WEBHOOK_URL != '' }}
        env:
          SLACK_WEBHOOK_URL: ${{ secrets.SLACK_WEBHOOK_URL }}
          ISSUE_NUMBER: ${{ steps.resolve.outputs.issue_number }}
          REPO: ${{ github.repository }}
        run: |
          json=$(gh api repos/${GITHUB_REPOSITORY}/issues/${ISSUE_NUMBER})
          TITLE=$(echo "$json" | jq -r .title)
          URL=$(echo "$json" | jq -r .html_url)
          USER=$(echo "$json" | jq -r .user.login)
          LABELS=$(echo "$json" | jq -r '[.labels[].name] | join(", ")')
          payload=$(jq -n --arg text "New issue in $REPO: <$URL|$TITLE>\nBy: @$USER\nLabels: $LABELS" '{text: $text}')
          curl -s -X POST -H 'Content-type: application/json' --data "$payload" "$SLACK_WEBHOOK_URL" >/dev/null 2>&1 || true
